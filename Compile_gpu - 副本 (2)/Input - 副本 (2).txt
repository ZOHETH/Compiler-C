Program->Global-declaration Program_1 
Program_1->Global-declaration Program_1 |@ 
Global-declaration->Indent-decl Global-declaration_1 
Global-declaration_1->Function-decl |G-variable-decl 
Indent-decl->Type Indent-decl_1 
Indent-decl_1->Pointer id <ident-rec> 
Function-decl->( Parameter_decl ) { Body-decl <id-to-glo>} <leave> 
G-variable-decl->Init Decl_1 ; 
Init->= Expression <equla_op>|@ 
Parameter_decl->Type Pointer id <parameter-rec>Decl_3 |@ 
Decl_1->, Indent-decl_1 Init Decl_1 |@ 
Variable-decl->Type Variable-decl_1 
Variable-decl_1->Pointer id <loc-var-rec>Decl_2 ; 
Decl_2->, Pointer id <loc-var-rec>Decl_2 |@ 
Decl_3->, Pointer id <parameter-rec>Decl_3 |@ 
Pointer->* Pointer <add_pointer>|@ 
Type->char <update_type>|void <update_type>|int <update_type> 
Body-decl-><loc-index-rec>Body-decl_1 <func-enter>Body-decl_2  
Body-decl_1->Variable-decl Body-decl_1 |@ 
Body-decl_2->Statement Body-decl_2 |@ 
Statement->If-statement |While-statement |{ Statement } |return Expression ; <leave>|Expression ; 
If-statement->if ( Logical-expression ) <if-begin>Statement else <else-begin>Statement <if-end-rec> 
While-statement->while <after-while>( Logical-expression ) <while-begin>Statement <while-end> 
Value->Item Value_1 
Value_1->Arith-op_1 Item <add_or_sub>Value_1 |@ 
Item->Factor Item_1 
Item_1->Arith-op_2 Factor <mul_or_div>Item_1 |@ 
Arith-op_1->+ |- 
Arith-op_2->* |/ 
Factor->( Value ) |Const |id 
Const->int_const |char_const 
Expression->Value Operation 
Operation->Compare-op Value <compare_op>|Equal-op Value <equla_op> |@ 
Compare-op->> |>= |>> |>>= |== |!= 
Equal-op->= |+= |-= 
Logical-expression->Expression Bool-expression 
Bool-expression->Logic-op Expression <logic_op>Bool-expression |@ 
Logic-op->&& |^^ 
 




